# -*- coding: utf-8 -*-
"""S3_PML_Sarah_lastpisanbismillah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCksFCYyQCq2WwSLmtZWDWyE0SqFyo_z

<h1><center>Profil Dicoding</center></h1><hr>
<p> Nama  : Sarah Salsabila </p>
<p> Email : m314v4331@dicoding.org</p>
<p> Alamat: Karawang , Jawabarat</p>
"""

from google.colab import drive
drive.mount('/content/gdrive')

import os
os.environ['KAGGLE_CONFIG_DIR'] ="/content/gdrive/MyDrive/Colab Notebooks/kaggle"

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Colab Notebooks/kaggle
!pwd

!kaggle datasets download -d emmarex/plantdisease

!unzip

!unzip -qq plantdisease.zip
print('Done sar!')

import os
plantvilage = os.path.join('/content/gdrive/MyDrive/Colab Notebooks/kaggle/PlantVillage')
print(os.listdir(plantvilage))

len(os.listdir(plantvilage))

plantvilage=['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy', 'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy', 'Tomato_Bacterial_spot', 'Tomato_Early_blight', 'Tomato_Late_blight', 'Tomato_Leaf_Mold', 'Tomato_Septoria_leaf_spot', 'Tomato_Spider_mites_Two_spotted_spider_mite', 'Tomato__Target_Spot', 'Tomato__Tomato_YellowLeaf__Curl_Virus', 'Tomato__Tomato_mosaic_virus', 'Tomato_healthy']

for plantdisease in plantvilage:
    print(f'{plantdisease} images: ', len(os.listdir(f'/content/gdrive/MyDrive/Colab Notebooks/kaggle/PlantVillage/{plantdisease}')))

import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image             
from keras_preprocessing.image import ImageDataGenerator

BASIS_DIR = "/content/gdrive/MyDrive/Colab Notebooks/kaggle/PlantVillage"
training_datagen = ImageDataGenerator(
      rescale = 1./255, 
	    rotation_range=40,     
      width_shift_range=0.2,  
      height_shift_range=0.2,
      shear_range=0.2, 
      zoom_range=0.2,  
      horizontal_flip=True,  
      fill_mode='nearest', 
      validation_split=0.2  
      )

train_generator = training_datagen.flow_from_directory( 
	BASIS_DIR,  
	target_size=(150,150), 
	class_mode='categorical',  
  shuffle=True,                                                                  
  subset='training'  
  )

validation_generator = training_datagen.flow_from_directory(      
	BASIS_DIR,     
	target_size=(150,150),      
	class_mode='categorical',
  shuffle=True,
  subset='validation' 
  )

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("\nAccuracy asudah lebih dari 92%,yeay stop training!")
      self.model.stop_training = True

callbacks = myCallback()

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(15, activation='softmax')
])

model.summary()

model.compile(
    optimizer='adam', 
    loss='categorical_crossentropy', 
    metrics=['accuracy']
)

history = model.fit(
    train_generator,
    epochs=50,
    verbose=1,
    validation_data=validation_generator,
    callbacks=[callbacks]
)

# Commented out IPython magic to ensure Python compatibility.
#membuat visualisasi grafik untuk accuracy pada saat Training model 
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

plt.plot(history.history['accuracy'], label='Training Accuracy', color='blue')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', color='red')
plt.title('Accuracy Training & Validation')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc="lower right")
plt.show()

#membuat visualisasi grafik untuk loss pada saat Training model 
plt.plot(history.history['loss'], label='Training Loss', color='blue')
plt.plot(history.history['val_loss'], label='Validation Loss', color = 'red')
plt.title('Loss Training & Validation')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc="lower right")
plt.show()

# Konversi model.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

def predict_image(image_upload, model = model):
  im = image_upload
  im_array = np.asarray(im)
  im_array = im_array*(1/225)
  im_input = tf.reshape(im_array, shape = [1, 150, 150, 3])

  predict_array = model.predict(im_input)[0]

  import pandas as pd
  df = pd.DataFrame(predict_array)
  df = df.rename({0:'Kemungkinan'}, axis = 'columns')
  leaf = ['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy', 'Potato___Early_blight', 'Potato___Late_blight',
          'Potato___healthy', 'Tomato_Bacterial_spot', 'Tomato_Early_blight', 'Tomato_Late_blight', 'Tomato_Leaf_Mold',
          'Tomato_Septoria_leaf_spot', 'Tomato_Spider_mites_Two_spotted_spider_mite', 'Tomato__Target_Spot', 'Tomato__Tomato_YellowLeaf__Curl_Virus',
          'Tomato__Tomato_mosaic_virus', 'Tomato_healthy']
  df['Tipe'] = leaf
  df = df[['Tipe', 'Kemungkinan']]

  predict_label = np.argmax(model.predict(im_input))

  if predict_label == 0:
      predict_daun = 'Pepper__bell___Bacterial_spot'
  elif predict_label == 1:
      predict_daun = 'Pepper__bell___healthy'
  elif predict_label == 2:
      predict_daun = 'Potato___Early_blight'
  elif predict_label == 3:
      predict_daun = 'Potato___Late_blight'
  elif predict_label == 4:
      predict_daun = 'Potato___healthy'
  elif predict_label == 5:
      predict_daun = 'Tomato_Bacterial_spot'
  elif predict_label == 6:
      predict_daun = 'Tomato_Early_blight'
  elif predict_label == 7:
      predict_daun = 'Tomato_Late_blight'
  elif predict_label == 8:
      predict_daun = 'Tomato_Leaf_Mold'
  elif predict_label == 9:
      predict_daun = 'Tomato_Septoria_leaf_spot'
  elif predict_label == 10:
      predict_daun = 'Tomato_Spider_mites_Two_spotted_spider_mite'
  elif predict_label == 11:
      predict_daun = 'Tomato__Target_Spot'
  elif predict_label == 12:
      predict_daun = 'Tomato__Tomato_YellowLeaf__Curl_Virus'
  elif predict_label == 13:
      predict_daun = 'Tomato__Tomato_mosaic_virus'
  else:
      predict_daun = 'Tomato_healthy'

  return predict_daun, df

# Commented out IPython magic to ensure Python compatibility.
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
import numpy as np

def predict():
  testDaun = files.upload()

  for fn in testDaun.keys():
    path = fn
    img = image.load_img(path, target_size=(150,150))
    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    img = np.vstack([x])

  label, df = predict_image(img)

  print('\n')
  plt.show()
  print("\nPada Foto Daun terdeteksi bahwa Tanaman ini Merupakan " + label)
  print('\n')
  print(df)
  print('\n')

predict()

predict()